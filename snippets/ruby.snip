# typo  {{{
snippet edn
abbr    => end?
options head
	end
# }}}

# debug  {{{
snippet byebug
abbr    require 'byebug'; byebug
options head
	require 'byebug'; byebug

snippet debugger
abbr    require 'debugger'; debugger
options head
	require 'debugger'; debugger

snippet pry
abbr    require 'pry'; binding.pry
options head
	require 'pry'; binding.pry
# }}}

# eval  {{{
snippet eval
abbr    eval(string)
options word
	eval(<<-RUBY, __FILE__, __LINE__ + 1)
		${0}
	RUBY

snippet class_eval
abbr    class_eval(string)
options word
	class_eval(<<-RUBY, __FILE__, __LINE__ + 1)
		${0}
	RUBY

snippet module_eval
abbr    module_eval(string)
options word
	module_eval(<<-RUBY, __FILE__, __LINE__ + 1)
		${0}
	RUBY

snippet instance_eval
abbr    instance_eval(string)
options word
	instance_eval(<<-RUBY, __FILE__, __LINE__ + 1)
		${0}
	RUBY
# }}}

# class, module  {{{
snippet class
abbr    class ...\n end
options head
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${0}
	end

snippet class_parent
abbr    class ... < {ParentClass}\n end
options head
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ${2}
		${0}
	end

snippet module
abbr    module ...\n end
options head
	module ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${0}
	end

snippet class_inline
abbr    class ...; ...; end
options head
	class ${1}; ${0}; end

snippet classexception
abbr    class ... < StandardError\n ...\n end
alias   class_exception
options head
	class ${1} < StandardError
		def initialize(message)
			super(${0})
		end
	end

snippet classexception_inline
abbr    class ... < StandardError; end
alias   class_exception_inline
options head
	class ${0} < StandardError; end

snippet module_inline
abbr    module ...; ...; end
options head
	module ${1}; ${0}; end
# }}}

# def  {{{
snippet def
abbr    def ...\n end
options head
	def ${1}
		${0}
	end

snippet def_self
alias   defs
options head
	def self.${1}
		${0}
	end

snippet def_rescue
abbr    def ... rescue ... end
options head
	def ${1}
		${0}
	rescue ${2:#:StandardError} => e
	end

snippet def_test
alias   deftest
abbr    def test_{testcase}\n ...\n end
options head
	def test_${1}
		${0}
	end
# }}}

# lambda, proc  {{{
snippet lambda
abbr    lambda { ... }
options word
	lambda { ${0} }

snippet lambdav
abbr    lambda {|var| ... }
options word
	lambda {|${1}| ${0} }

snippet ->
abbr    -> { ... }
options word
	-> { ${0} }

snippet ->a
alias   ->v
abbr    ->(args) { ... }
options word
	->(${1}) { ${0} }

snippet proc
abbr    proc { ... }
options word
	proc { ${0} }

snippet procv
abbr    proc {|var| ... }
options word
	proc {|${1}| ${0} }

snippet procnew
abbr    Proc.new { ... }
options word
	Proc.new { ${0} }

snippet procnewv
abbr    Proc.new {|var| ... }
options word
	Proc.new {|${1}| ${0} }
# }}}

# do ... end  {{{
snippet do
abbr    do ...\n end
options word
	do
		${0}
	end

snippet dovar
abbr    do |var|\n ...\n end
options word
	do |${1}|
		${0}
	end
# }}}

# if, unless, case  {{{
snippet if
abbr    if ...\n end
options head
	if ${1}
		${0}
	end

snippet if_else
alias   ife
abbr    if ...\n else\n ...\n end
options head
	if ${1}
		${0}
	else
	end

snippet unless
abbr    unless ...\n ...\n end
options head
	unless ${1}
		${0}
	end

snippet case
abbr    case\n when ...\n end
options head
	case
	when ${1}
		${0}
	end

snippet case_object
abbr    case {object}\n when ...\n end
options head
	case ${1}
	when ${2}
		${0}
	end
# }}}

# while, until  {{{
snippet while
abbr    while ...\n ...\n end
options head
	while ${1}
		${0}
	end

snippet until
abbr    until ...\n ...\n end
options head
	until ${1}
		${0}
	end
# }}}

# utilities  {{{
snippet shebang
alias   #!
abbr    #!/usr/bin/env ruby
options head
	#!/usr/bin/env ruby

snippet require
options head
	require "${0}"

snippet require_relative
options head
	require_relative "${0}"

snippet attr_reader
abbr    attr_reader ...
options head
	attr_reader :${0}

snippet attr_writer
abbr    attr_writer ...
options head
	attr_writer :${0}

snippet attr_accessor
abbr    attr_accessor ...
options head
	attr_accessor :${0}

snippet def_delegator
abbr    def_delegator {object}, :{method}
options head
	def_delegator :${1:#:object}, :${0:#:method}

snippet def_delegator_new_name
abbr    def_delegator {object}, :{old_method}, :{new_method}
options head
	def_delegator :${1:#:object}, :${2:#:old_method}, :${0:#:new_method}

snippet def_delegators
abbr    def_delegators {object}, :{method1}, {method2}, ...
options head
	def_delegators :${1:#:object}, :${0:#:method}

snippet alias
abbr    alias new_name old_name
options head
	alias ${1:#:new_name} ${0:#:old_name}

snippet alias_symbol
abbr    alias :new_name :old_name
options head
	alias :${1:#:new_name} :${0:#:old_name}

snippet method_missing
abbr    method_missing(method, *args, &block) ...
regexp  'def [method_missing]*$'
options word
	method_missing(method, *args, &block)
		if method.to_s =~ ${1:#:regexp}
			${0}
		else
			super
		end
	end

snippet tap
abbr    tap {|object| ... }
options word
	tap {|${1:object}| ${0} }

snippet hash_new
alias   Hash_new
abbr    Hash.new{|h, k| h[k] = ... }
options word
	Hash.new {|${1:hash}, ${2:key}| $1[$2] = ${0} }

snippet notimplementederror
alias   NotImplementedError
abbr    NotImplementedError
options word
	NotImplementedError

snippet begin_rescue
options head
	begin
		${0}
	rescue ${1:#:Exception} => e
	end

snippet optparse
alias   require_optparse
abbr    require "optparse"\n ...\n opts.banner ...
options word
	require "optparse"
	
	options = { ${0:default: "args"} }
	
	ARGV.options do |opts|
		opts.banner = "Usage: #{File.basename($PROGRAM_NAME)}"
	end

snippet opts_on
alias   opt
abbr    opts.on(...)
options head
	opts.on("-${1:#:o}", "--${2:#:long-option-name}", ${3:String}, "${4:#:description}") do |value|
		${0}
	end
# }}}

# each  {{{
snippet each
abbr    each {|var| ... }
options word
	each {|${1:#:var}| ${0} }

snippet each_do
abbr    each do |var|\n ...\n end
options word
	each do |${1:#:var}|
		${0}
	end

snippet each_byte
abbr    each_byte {|var| ... }
options word
	each_byte {|${1}| ${0} }

snippet each_char
abbr    each_char {|var| ... }
options word
	each_char {|${1}| ${0} }

snippet each_index
abbr    each_index {|var| ... }
options word
	each_index {|${1}| ${0} }

snippet each_key
abbr    each_key {|var| ... }
options word
	each_key {|${1}| ${0} }

snippet each_value
abbr    each_value {|var| ... }
options word
	each_value {|${1}| ${0} }

snippet each_line
abbr    each_line {|var| ... }
options word
	each_line {|${1}| ${0} }

snippet each_pair
abbr    each_pair {|var| ... }
options word
	each_pair {|${1}| ${0} }

snippet each_slice
abbr    each_slice {|var| ... }
options word
	each_slice {|${1}| ${0} }

snippet each_with_index
abbr    each_with_index {|var, i| ... }
options word
	each_with_index {|${1}, ${2:i}| ${0} }

snippet each_with_index_do
abbr    each_with_index do |var, i|\n ...\n end
options word
	each_with_index do |${1}, ${2:i}|
		${0}
	end

snippet each_with_object
abbr    each_with_object(init) {|var, memo|\n ...\n }
options word
	each_with_object(${1:#:initial_value}) {|${2:#:var}, ${3:memo}|
		${0}
	}

snippet inject
abbr    inject(init) {|memo, var|\n ...\n }
options word
	inject(${1:#:initial_value}) {|${2:memo}, ${3:#:var}|
		${0}
	}

snippet all?
abbr    all? {|var| ... }
options word
	all? {|${1}| ${0} }

snippet any?
abbr    any? {|var| ... }
options word
	any? {|${1}| ${0} }

snippet one?
abbr    one? {|var| ... }
options word
	one? {|${1}| ${0} }

snippet none?
abbr    none? {|var| ... }
options word
	none? {|${1}| ${0} }

snippet map
abbr    map {|var| ... }
options word
	map {|${1}| ${0} }

snippet map!
abbr    map! {|var| ... }
options word
	map! {|${1}| ${0} }

snippet detect
abbr    detect {|var| ... }
options word
	detect {|${1}| ${0} }

snippet select
abbr    select {|var| ... }
options word
	select {|${1}| ${0} }

snippet select!
abbr    select! {|var| ... }
options word
	select {|${1}| ${0} }

snippet reject
abbr    reject {|var| ... }
options word
	reject {|${1}| ${0} }

snippet reject!
abbr    reject! {|var| ... }
options word
	reject! {|${1}| ${0} }

snippet sort
abbr    sort {|a, b| ... }
options word
	sort {|a, b| ${0} }

snippet sort_by
abbr    sort_by {|var| ... }
options word
	sort_by {|${1}| ${0} }

snippet group_by
abbr    group_by {|var| ... }
options word
	group_by {|${1}| ${0} }

snippet index_by
abbr    index_by {|var| ... }
options word
	index_by {|${1}| ${0} }

snippet partition
abbr    partition {|var| ... }
options word
	partition {|${1}| ${0} }
# }}}

# File, Dir  {{{
snippet fileopen
abbr    File.open(filepath, mode) do |f|\n ...\n end
options head
	File.open(${1:#:filepath}, "${2:#:mode}") do |f|
		${0}
	end

snippet glob
abbr    Dir.glob("**/*") do |filepath|\n ...\n end
options head
	Dir.glob(${1:"**/*"}) do |filepath|
		${0}
	end
# }}}

# ActiveSupport  {{{
snippet concern_extend
alias   concern_extend
abbr    extend ActiveSupport::Concern\n included do\n ... class_methods do\n ...
options head
	extend ActiveSupport::Concern
	
	included do
	end
	
	class_methods do
	end

snippet concern
alias   activesupport_concern
alias   ActiveSupport::Concern
abbr    ActiveSupport::Concern
options word
	ActiveSupport::Concern

snippet orderedhash
alias   ActiveSupport::OrderedHash
abbr    ActiveSupport::OrderedHash[...]
options word
	ActiveSupport::OrderedHash[${0}]

snippet hashwithindifferentaccess
alias   ActiveSupport::HashWithIndifferentAccess
abbr    ActiveSupport::HashWithIndifferentAccess
options word
	ActiveSupport::HashWithIndifferentAccess
# }}}

# ActiveRecord  {{{
snippet activerecord
alias   ActiveRecord
abbr    ActiveRecord
options word
	ActiveRecord

snippet activerecord_base
alias   ActiveRecord::Base
abbr    ActiveRecord::Base
options word
	ActiveRecord::Base

snippet activerecord_relation
alias   ActiveRecord::Relation
abbr    ActiveRecord::Relation
options word
	ActiveRecord::Relation

snippet activerecord_recordnotfound
alias   ActiveRecord::RecordNotFound
abbr    ActiveRecord::RecordNotFound
options word
	ActiveRecord::RecordNotFound

snippet activerecord_recordinvalid
alias   ActiveRecord::RecordInvalid
abbr    ActiveRecord::RecordInvalid
options word
	ActiveRecord::RecordInvalid

snippet activerecord_relation_select
alias   select_relation
abbr    select(...)
options word
	select(${0})

snippet activerecord_relation_joins
alias   joins_relation
abbr    joins(...)
options word
	joins(${0})

snippet activerecord_relation_includes
alias   includes_relation
abbr    includes(...)
options word
	includes(${0})

snippet activerecord_relation_references
alias   references_relation
abbr    references(...)
options word
	references(${0})

snippet activerecord_relation_eager_load
alias   eager_load_relation
abbr    eager_load(...)
options word
	eager_load(${0})

snippet activerecord_relation_preload
alias   preload_relation
abbr    preload(...)
options word
	preload(${0})

snippet activerecord_relation_where
alias   where_relation
abbr    where(...)
options word
	where(${0})

snippet activerecord_relation_rewhere
alias   rewhere_relation
abbr    rewhere(...)
options word
	rewhere(${0})

snippet activerecord_relation_where_not
alias   where_not_relation
alias   not_relation
abbr    where.not(...)
options word
	where.not(${0})

snippet activerecord_relation_having
alias   having_relation
abbr    having(...)
options word
	having(${0})

snippet activerecord_relation_group
alias   group_relation
abbr    group(...)
options word
	group(${0})

snippet activerecord_relation_order
alias   order_relation
abbr    order(...)
options word
	order(${0})

snippet activerecord_relation_reorder
alias   reorder_relation
abbr    reorder(...)
options word
	reorder(${0})

snippet activerecord_relation_reverse_order
alias   reverse_order_relation
abbr    reverse_order
options word
	reverse_order

snippet activerecord_relation_limit
alias   limit_relation
abbr    limit(...)
options word
	limit(${0})

snippet activerecord_relation_offset
alias   offset_relation
abbr    offset(...)
options word
	offset(${0})

snippet accepts_nested_attributes_for
alias   nested_attributes_for
abbr    accepts_nested_attributes_for ...
options head
	accepts_nested_attributes_for :${0}

snippet i18nt_activerecord_model
alias   I18nt_activerecord_model
abbr    I18n.t "activerecord.models.{model_name}"
options word
	I18n.t "activerecord.models.${0:#:model_name}"

snippet i18nt_activerecord_attribute
alias   I18nt_activerecord_attribute
abbr    I18n.t "activerecord.attributes.{model_name}.{attribute_name}"
options word
	I18n.t "activerecord.attributes.${1:#:model_name}.${0:#:attribute_name}"

snippet t_activerecord_model
abbr    t "activerecord.models.{model_name}"
options word
	t "activerecord.models.${0:#:model_name}"

snippet t_activerecord_attribute
abbr    t "activerecord.attributes.{model_name}.{attribute_name}"
options word
	t "activerecord.attributes.${1:#:model_name}.${0:#:attribute_name}"

snippet activerecord_human_attribute_name
alias   human_attribute_name
abbr    human_attribute_name(:{attribute_name})
options word
	human_attribute_name(:${0:#:attribute_name})

snippet preload_association
abbr    ActiveRecord::Associations::Preloader.new.preload {records}, {associations}
options head
	ActiveRecord::Associations::Preloader.new.preload ${1:#:records}, ${2:#:associations}

snippet preload_association_with_scope
abbr    ActiveRecord::Associations::Preloader.new.preload {records}, {associations}, {preload_scope}
options head
	ActiveRecord::Associations::Preloader.new.preload ${1:#:records}, ${2:#:associations}, ${3:#:preload_scope}

snippet activerecord_migration_reversible
alias   reversible
abbr    reversible do |direction|\n ...\n end
options head
	reversible do |direction|
		direction.up do
			${0}
		end

		direction.down do
		end
	end

snippet activerecord_migration_say_with_time
alias   say_with_time
abbr    say_with_time "{message}" do\n ...\n end
options head
	say_with_time "${1}" do
		${0}
	end
# }}}

# TestUnit  {{{
snippet assert
abbr    assert ...
options head
	assert ${0}

snippet assert_equal
abbr    assert_equal {expected}, {actual}
options head
	assert_equal ${1:#:expected}, ${0:#:actual}

snippet assert_not_equal
abbr    assert_not_equal {unexpected}, {actual}
options head
	assert_not_equal ${1:#:unexpected}, ${0:#:actual}

snippet assert_nil
abbr    assert_nil ...
options head
	assert_nil ${0}

snippet assert_not_nil
abbr    assert_not_nil ...
options head
	assert_not_nil ${0}

snippet assert_match
abbr    assert_match(/{expected_pattern}/, {actual_string})
options head
	assert_match(/${1:#:expected_pattern}/, ${0:#:actual_string})

snippet assert_no_match
abbr    assert_no_match(/{unexpected_pattern}/, {actual_string})
options head
	assert_no_match(/${1:#:unexpected_pattern}/, ${0:#:actual_string})

snippet assert_raise
abbr    assert_raise {Exception} { ... }
options head
	assert_raise ${1:#:Exception} { ${0} }

snippet assert_raise_block
abbr    assert_raise {Exception} do\n ...\n end
options head
	assert_raise ${1:#:Exception} do
		${0}
	end

snippet assert_nothing_raised
abbr    assert_nothing_raised { ... }
options head
	assert_nothing_raised { ${0} }

snippet assert_nothing_raised_block
abbr    assert_nothing_raised do\n ...\n end
options head
	assert_nothing_raised do
		${0}
	end

snippet assert_difference
abbr    assert_difference -> { ... }, ... do\n ...\n end
options head
	assert_difference -> { ${1} }, ${2} do
		${0}
	end

snippet assert_no_difference
abbr    assert_no_difference -> { ... } do\n ...\n end
options head
	assert_no_difference -> { ${1} } do
		${0}
	end

snippet assert_predicate
abbr    assert_predicate {object}, :{predicate}
options head
	assert_predicate ${1:#:object}, :${0:#:predicate}

snippet assert_not_predicate
abbr    assert_not_predicate {object}, :{predicate}
options head
	assert_not_predicate ${1:#:object}, :${0:#:predicate}

snippet assert_dom_equal
abbr    assert_dom_equal {expected}, {actual}
options head
	assert_dom_equal ${1:#:expected}, :${0:#:actual}
# }}}

# RSpec  {{{
snippet rspec_subject
alias   subject
abbr    subject { ... }
options head
	subject { ${0} }

snippet rspec_let
alias   let
abbr    let(...) { ... }
options head
	let(:${1}) { ${0} }

snippet rspec_let!
alias   let!
abbr    let!(...) { ... }
options head
	let!(:${1}) { ${0} }

snippet rspec_it
alias   it
abbr    it "{description}" do\n ...\n end
options head
	it "${1:#:description}" do
		${0}
	end

snippet rspec_it_should
alias   it_should
alias   itshould
abbr    it { should ... }
options head
	it { should ${0} }

snippet rspec_it_should_not
alias   it_should_not
alias   itshould_not
abbr    it { should_not ... }
options head
	it { should_not ${0} }

snippet rspec_it_is_expected_to
alias   it_is_expected_to
abbr    it { is_expected.to ... }
options head
	it { is_expected.to ${0} }

snippet rspec_it_is_expected_not_to
alias   it_is_expected_not_to
abbr    it { is_expected.not_to ... }
options head
	it { is_expected.not_to ${0} }

snippet rspec_specify
alias   specify
abbr    specify "{description}" do\n ...\n end
options head
	specify "${1:#:description}" do
		${0}
	end

snippet rspec_specify_should
alias   specify_should
alias   specifyshould
abbr    specify { should ... }
options head
	specify { ${0} }

snippet expect_to
abbr    expect(...).to ...
options head
	expect(${1}).to ${0}

snippet expect_block_to
abbr    expect { ... }.to ...
options head
	expect { ${1} }.to ${0}

snippet rspec_describe
alias   describe
abbr    describe ... do\n ...\n end
options head
	describe ${1:`substitute(substitute(vim_snippets#Filename(), '_spec$', '', ''), '\(_\|^\)\(.\)', '\u\2', 'g')`} do
		${0}
	end

snippet rspec_context
alias   context
abbr    context "{context}" do\n ...\n end
options head
	context "${1}" do
		${0}
	end

snippet rspec_before
alias   before
abbr    before do\n ...\n end
options head
	before do
		${0}
	end

snippet rspec_before_each
alias   before_each
alias   beforeeach
abbr    before :each do\n ...\n end
options head
	before :each do
		${0}
	end

snippet rspec_before_all
alias   before_all
alias   beforeall
abbr    before :all do\n ...\n end
options head
	before :all do
		${0}
	end

snippet rspec_after
alias   after
abbr    after do\n ...\n end
options head
	after do
		${0}
	end

snippet rspec_after_each
alias   after_each
alias   aftereach
abbr    after :each do\n ...\n end
options head
	after :each do
		${0}
	end

snippet rspec_after_all
alias   after_all
alias   afterall
abbr    after :all do\n ...\n end
options head
	after :all do
		${0}
	end

snippet rspec_pending
alias   pending
abbr    pending "..." do\n ...\n end
options head
	pending "${1}" do
		${0}
	end

snippet rspec_shared_examples
alias   shared_examples
abbr    shared_examples ...
options head
	shared_examples "${0:#:shared examples name}"

snippet rspec_it_behaves_like
alias   it_behaves_like
abbr    it_behaves_like ...
options head
	it_behaves_like "${0:#:shared examples name}"
# }}}

# SQL  {{{
snippet sql_coalesce
alias   coalesce
alias   COALESCE
abbr    COALESCE
options word
	COALESCE
# }}}
